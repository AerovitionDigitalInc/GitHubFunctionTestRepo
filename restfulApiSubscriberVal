/***************************************
Here we take advantage of $http 
that returns  a succes//failure($promise)
a prototype to obtain webpage 
information ANY var defined  and does 
a CRUD to store Restful API retrival and 
CRUD operations

Distribution is prohibited.
Purpose of Main Module:
subscriberValidation [Module()]
CallBack()
Prototype.
Disclaimer: This code willbe modified for 
conversational,educational & logic 
implementaiton purpose time to Time 
by Modifier from, company below:

Aerovition Digital Inc.
Date 7/5/2016
*****************************************
*/

                         angular.module("mainModule", ["ngResource"])
                           .factory("SubscriberService", function ($resource)
                           {
                             // A resource object that can
                             // interact with the RESTful API of the server.
                             var resource = $resource("Subscriber/:operation/:userid",
                               {
                                 userid: 0  //numeric  token
                               },
                               {
                                 // A method to update the subscriber address
                                 updateAddress: {
                                   method: "PUT",
                                   isArray: false
                                 }
                               }
                             );

                             // Function to retrieve a subscriberby USERID
                             resource.retrieveSubscriber= function (personUserid) {
                               return this.get(
                                 {
                                   operation: "retrieve",
                                   userid: personUserid
                                 });
                             };

                             // Function to retrieve some Subscriber by USERIDs
                       resource.retrieveSubscriber = function (SubscriberUseridsArray) {
                               return this.query(
                                 {
                                   operation: "retrievearray",
                                   "useridsArray[]": SubscriberUseridsArray
                                 });
                             };

                             // Function to save a subscriberobject
                             resource.storeSubscriber= function (x_person, x_address) {
                               return this.save(
                                 {
                                   operation: "store",
                                   firstName: x_person.firstName,
                                   lastName: x_person.lastName
                                 },
                                 x_address
                               );
                             };

                             // Custom function to delete a subscriberobject by USERID
                             resource.eraseSubscriber= function (personUserid) {
                               return this.delete(
                                 {
                                   operation: "erase",
                                   userid: personUserid
                                 });
                             };

                             // Custom function to update the address of a person
                             resource.updatePersonAddress = function (personUserid, x_address) {
                               return this.updateAddress(
                                 {
                                   operation: "updateaddress",
                                   userid: personUserid
                                 },
                                 x_address
                               );
                             };

                             return resource;
                           })
                           .factory("PersonResource", function ($resource)
                           {
                             // A resource object that can
                             // interact with the RESTful API of the server.
                             var resource = $resource("Subscriber/:operation/:userid",
                               {
                                 userid: "@userid",
                                 firstName: "@firstName",
                                 lastName: "@lastName"
                               },
                               {
                                 // A method to update the address of the
                                 // subscriber
                                 updateAddress: {
                                   method: "PUT",
                                   isArray: false
                                 }
                               }
                             );

                             // A function to retrieve a person
                             resource.prototype.retrieve = function () {
                               return this.$get(
                                 {
                                   operation: "retrieve"
                                 });
                             };

                             // A function to save a subscribr information
                             resource.prototype.store = function () {
                               // Function to Store the current resource instance
                               // to use it later in the handler function.
                               var thisInst = this;

                               // Function is a Callback to the constructor-level
                               // "save" method
                               // because the instance-level "$store" method
                               // doesn't let me pass the (x_)address as raw POST data
                               // but  passes the entire Resource instance as
                               // a JSON object. function will Return the promise 
                               // object like the
                               // instance-level methods of a resource object do.
                               
                               return resource.save(
                                 {
                                   operation: "store",
                                   firstName: this.firstName,
                                   lastName: this.lastName
                                 },
                                 this.x_address,
                                 function (value)
                                 {
                                   // Copy to the resource instance
                                   // all the properties of the object
                                   // returned by the server.
                                   angular.copy(value, thisInst);
                                 }
                               ).$promise;
                             };

                             // Custom function to delete a subscriber
                             resource.prototype.erase = function () {
                               return this.$delete(
                                 {
                                   operation: "erase"
                                 });
                             };

